<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swipeables on Advanced RecyclerView</title>
    <link>http://h6ah4i.com/android-advancedrecyclerview/swipeable/</link>
    <description>Recent content in Swipeables on Advanced RecyclerView</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Mar 2016 00:11:02 +0100</lastBuildDate>
    <atom:link href="http://h6ah4i.com/android-advancedrecyclerview/swipeable/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Swipeable</title>
      <link>http://h6ah4i.com/android-advancedrecyclerview/swipeable/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>http://h6ah4i.com/android-advancedrecyclerview/swipeable/</guid>
      <description>

&lt;h2 id=&#34;1-make-the-adapter-supports-stable-id&#34;&gt;1. Make the adapter supports stable ID&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This step is very important. If adapter does not return stable &amp;amp; unique ID, it will cause weird behaviors (wrong animation, NPE, etc&amp;hellip;)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MyAdapter extends RecyclerView.Adapter&amp;lt;MyAdapter.MyViewHolder&amp;gt; {
    MyAdapter() {
        setHasStableIds(true);
    }

    @Override
    public long getItemId(int position) {
        return mItems.get(position).getId();  // requires static value, it means need to keep the same value even if the item position has been changed.
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-implement-the-swipeableitemadapter-interface&#34;&gt;2. Implement the &lt;code&gt;SwipeableItemAdapter&lt;/code&gt; interface&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MyAdapter extends RecyclerView.Adapter&amp;lt;MyAdapter.MyViewHolder&amp;gt; {
    ...
    static class MyViewHolder extends RecyclerView.ViewHolder {
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;:arrow_down: :arrow_down: :arrow_down:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MyAdapter extends RecyclerView.Adapter&amp;lt;MyAdapter.MyViewHolder&amp;gt; 
        extends RecyclerView.Adapter&amp;lt;MyAdapter.MyViewHolder&amp;gt;
        implements SwipeableItemAdapter&amp;lt;MyAdapter.MyViewHolder&amp;gt; {

    // NOTE: Make accessible with short name
    private interface Swipeable extends SwipeableItemConstants {
    }

    ...

    @Override
    public int onGetSwipeReactionType(MyViewHolder holder, int position, int x, int y) {
        // TODO implement here later
        return Swipeable.REACTION_CAN_NOT_SWIPE_ANY;
    }

    @Override
    public void onSetSwipeBackground(MyViewHolder holder, int position, int type) {
        // TODO implement here later
    }

    @Override
    public SwipeResultAction onSwipeItem(MyViewHolder holder, final int position, int result) {
        // TODO implement here later
        return new SwipeResultActionDefault();
    }

    static class MyViewHolder extends RecyclerView.ViewHolder {
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-extend-the-abstractswipeableitemviewholder-instead-of-the-recyclerview-viewholder&#34;&gt;3. Extend the &lt;code&gt;AbstractSwipeableItemViewHolder&lt;/code&gt; instead of the &lt;code&gt;RecyclerView.ViewHolder&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MyAdapter ... {
    ...
    static class MyViewHolder extends RecyclerView.ViewHolder {
        ...

        public MyViewHolder(View v) {
            super(v);
            ...
        }

        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;:arrow_down: :arrow_down: :arrow_down:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MyAdapter ... {
    ...
 public static class MyViewHolder extends AbstractSwipeableItemViewHolder {
　　　　　...

        public MyViewHolder(View v) {
            super(v);
            ...
        }

        @Override
        public View getSwipeableContainerView() {
            // TODO implement here later
            return null;
        }

        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-modify-layout-file-of-item-views&#34;&gt;4. Modify layout file of item views&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;TextView
    xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:id=&amp;quot;@android:id/text1&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;56dp&amp;quot;
    android:gravity=&amp;quot;center&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;:arrow_down: :arrow_down: :arrow_down:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;FrameLayout
    xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;56dp&amp;quot;&amp;gt;

    &amp;lt;FrameLayout
        android:id=&amp;quot;@+id/container&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;match_parent&amp;quot;&amp;gt;

        &amp;lt;TextView
            android:id=&amp;quot;@android:id/text1&amp;quot;
            android:layout_width=&amp;quot;match_parent&amp;quot;
            android:layout_height=&amp;quot;56dp&amp;quot;
            android:layout_gravity=&amp;quot;top|left&amp;quot;
            android:gravity=&amp;quot;center&amp;quot;/&amp;gt;

    &amp;lt;/FrameLayout&amp;gt;
&amp;lt;/FrameLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-update-viewholder&#34;&gt;5. Update ViewHolder&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MyAdapter ... {
    ...
 public static class MyViewHolder extends AbstractSwipeableItemViewHolder {
        TextView mText;

        public MyViewHolder(View v) {
            super(v);
            mText = (TextView) v;
        }

        @Override
        public View getSwipeableContainerView() {
            // TODO implement here later
            return null;
        }

        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;:arrow_down: :arrow_down: :arrow_down:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MyAdapter ... {
    ...
 public static class MyViewHolder extends AbstractSwipeableItemViewHolder {
        TextView mTextView;
        FrameLayout mContainer;

        public MyViewHolder(View v) {
            super(v);
            mTextView = (TextView) v.findViewById(android.R.id.text1);
            mContainer = (FrameLayout) v.findViewById(R.id.container);
        }

        @Override
        public View getSwipeableContainerView() {
            return mContainer;
        }

        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-update-adapter&#34;&gt;6. Update Adapter&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MyAdapter ... {

    ...

    @Override
    public int onGetSwipeReactionType(MyViewHolder holder, int position, int x, int y) {
        ...
    }

    @Override
    public void onSetSwipeBackground(MyViewHolder holder, int position, int type) {
        ...
    }

    @Override
    public SwipeResultAction onSwipeItem(MyViewHolder holder, int position, int result) {
        ...
    }

    static class MyViewHolder ... {
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;:arrow_down: :arrow_down: :arrow_down:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
class MyAdapter ... {

    ...

    @Override
    public int onGetSwipeReactionType(MyViewHolder holder, int position, int x, int y) {
        // Make swipeable to LEFT direction
        return Swipeable.REACTION_CAN_SWIPE_LEFT;
    }

    @Override
    public void onSetSwipeBackground(MyViewHolder holder, int position, int type) {
        // You can set background color to holder.itemView.
        
        // The argument &amp;quot;type&amp;quot; can be one of the followings;
        // - Swipeable.DRAWABLE_SWIPE_NEUTRAL_BACKGROUND
        // - Swipeable.DRAWABLE_SWIPE_LEFT_BACKGROUND
        // (- Swipeable.DRAWABLE_SWIPE_UP_BACKGROUND)
        // (- Swipeable.DRAWABLE_SWIPE_RIGHT_BACKGROUND)
        // (- Swipeable.DRAWABLE_SWIPE_DOWN_BACKGROUND)
    }

    @Override
    public SwipeResultAction onSwipeItem(MyViewHolder holder, int position, int result) {
        // Return sub class of the SwipeResultAction.
        // Base (abstract) classes are
        // - SwipeResultActionDefault
        // - SwipeResultActionMoveToSwipedDirection
        // - SwipeResultActionRemoveItem

        // The argument &amp;quot;result&amp;quot; can be one of the followings;
        // 
        // - Swipeable.RESULT_CANCELED
        // - Swipeable.RESULT_SWIPED_LEFT
        // (- Swipeable.RESULT_SWIPED_UP)
        // (- Swipeable.RESULT_SWIPED_RIGHT)
        // (- Swipeable.RESULT_SWIPED_DOWN)

        if (result == Swipeable.RESULT_LEFT) {
            return new SwipeResultActionMoveToSwipedDirection() {
                // You can override these three methods
                // - void onPerformAction()
                // - void onSlideAnimationEnd()
                // - void onCleanUp()
            };
        } else {
            return new SwipeResultActionDefault();
        }
    }

    static class MyViewHolder ... {
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;7-modify-initialization-of-recyclerview-in-activity-or-in-fragment&#34;&gt;7. Modify initialization of RecyclerView in Activity (or in Fragment)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;void onCreate() {
    ...

    RecyclerView recyclerView = findViewById(R.id.recyclerView);
    MyAdapter adapter = new MyAdapter();

    recyclerView.setAdapter(adapter);
    recyclerView.setLayoutManager(new LinearLayoutManager(this));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;:arrow_down: :arrow_down: :arrow_down:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;void onCreate() {
    ...

    RecyclerView recyclerView = findViewById(R.id.recyclerView);
    RecyclerViewSwipeManager swipeManager = new RecyclerViewSwipeManager();


    MyAdapter adapter = new MyAdapter();
    RecyclerView.Adapter wrappedAdapter = swipeManager.createWrappedAdapter(adapter);

    recyclerView.setAdapter(wrappedAdapter);
    recyclerView.setLayoutManager(new LinearLayoutManager(this));

    swipeManager.attachRecyclerView(recyclerView);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-custom-more-and-details-of-the-implementation&#34;&gt;8. Custom more and details of the implementation&lt;/h2&gt;

&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/h6ah4i/android-advancedrecyclerview/tree/master/example/src/main/java/com/h6ah4i/android/example/advrecyclerview/demo_s_basic&#34;&gt;the example app implementation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>